`#include "geometrycentral/surface/transfer_functions.h"`

## Single Transfer

Example
```cpp
#include "geometrycentral/surface/heat_method_distance.h"
#include "geometrycentral/surface/signpost_intrinsic_triangulation.h"
#include "geometrycentral/surface/meshio.h"

// Load a mesh
std::unique_ptr<SurfaceMesh> mesh;
std::unique_ptr<VertexPositionGeometry> geometry;
std::tie(mesh, geometry) = loadMesh(filename);

// Create an intrinsic triangulation
SignpostIntrinsicTriangulation intTri(*mesh, *geometry);

// Change the intrinsic triangulation
intTri.delaunayRefine();

// Compute something useful on the intrinsic triangulation

// Compute distance
VertexData<double> distToSource = heatMethodDistance(*geometry, sourceVert);
/* do something useful */

```

## Repeated Transfer

##Attribute Transfer
The stateful class `AttributeTransfer` transfers functions between different triangulations.

### Constructors

??? func "`#!cpp AttributeTransfer::AttributeTransfer(CommonSubdivision& cs, VertexPositionGoemetry& geomA)`"

    Create a new solver for attribute transfer. Precomputation is performed lazily as needed.
    
    - `cs` is the common subdivision of the two triangulations between which the solver will transfer data.
    
    - `geomA` is the geometry of `meshA`.
    
??? func "`#!cpp AttributeTransfer::AttributeTransfer(CommonSubdivision& cs, IntrinsicTriangulation& intTri)`"

    Create a new solver for attribute transfer. Precomputation is performed lazily as needed.
    
    - `cs` is the common subdivision of the two triangulations between which the solver will transfer data.
    
    - `intTri` is the `IntrinsicTriangulation` object representing the two triangulations.
    
### Methods
??? func "`#!cpp VertexData<double> AttributeTransfer::transferAtoB(const VertexData<double>& valuesOnA, TransferMethod method)`"
    Transfers a scalar function from `meshA` to `meshB`
    
    - `valuesOnA` : the data on `meshA` to be transferred.
    
    - `method` : either `TransferMethod::Pointwise` for pointwise transfer of `TransferMethod::L2` for $L^2$-optimal transfer.

??? func "`#!cpp VertexData<double> AttributeTransfer::transferBtoA(const VertexData<double>& valuesOnB, TransferMethod method)`"
    Transfers a scalar function from `meshB` to `meshA`
    
    - `valuesOnB` : the data on `meshB` to be transferred.
    
    - `method` : either `TransferMethod::Pointwise` for pointwise transfer of `TransferMethod::L2` for $L^2$-optimal transfer.

```cpp
enum class TransferMethod { Pointwise = 0, L2 };
```
